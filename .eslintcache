[{"D:\\study\\JS-native\\src\\App.tsx":"1","D:\\study\\JS-native\\src\\redux\\actions.ts":"2","D:\\study\\JS-native\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx":"3","D:\\study\\JS-native\\src\\index.tsx":"4","D:\\study\\JS-native\\src\\lessons\\lesson2\\lesson2.ts":"5","D:\\study\\JS-native\\src\\redux\\state.ts":"6","D:\\study\\JS-native\\src\\lessons\\lesson3\\API.ts":"7","D:\\study\\JS-native\\src\\lessons\\lesson3\\Lesson3.tsx":"8"},{"size":610,"mtime":1623173366727,"results":"9","hashOfConfig":"10"},{"size":1453,"mtime":1622443412945,"results":"11","hashOfConfig":"10"},{"size":3878,"mtime":1622443412935,"results":"12","hashOfConfig":"10"},{"size":319,"mtime":1622443412936,"results":"13","hashOfConfig":"10"},{"size":6021,"mtime":1625992915082,"results":"14","hashOfConfig":"10"},{"size":286,"mtime":1622443412946,"results":"15","hashOfConfig":"10"},{"size":428,"mtime":1624006533391,"results":"16","hashOfConfig":"10"},{"size":1698,"mtime":1625993029040,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d1dpg3",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\study\\JS-native\\src\\App.tsx",[],"D:\\study\\JS-native\\src\\redux\\actions.ts",[],"D:\\study\\JS-native\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx",[],"D:\\study\\JS-native\\src\\index.tsx",[],"D:\\study\\JS-native\\src\\lessons\\lesson2\\lesson2.ts",["35"],"console.log('lesson 2');\r\n\r\n// Lexical environment\r\n// http://jsflow.org/docs/lex-env/\r\n\r\n//// Closure\r\n// https://learn.javascript.ru/closure\r\n// https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898\r\n// https://www.youtube.com/watch?v=pahO5XjnfLA\r\n\r\n//// Сurrying\r\n// https://learn.javascript.ru/currying-partials\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BA%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-javascript-5ec4a1d88827\r\n\r\n// Pattern Module\r\n// https://habr.com/ru/company/ruvds/blog/419997/\r\n\r\n// Recursion\r\n// https://learn.javascript.ru/recursion\r\n// https://www.youtube.com/watch?v=Kuq6oIN3PH0\r\n\r\n\r\n// Task 01\r\n// Реализовать функцию sum которая суммирует 2 числа следующим образом sum(3)(6) === 9\r\n\r\nfunction sum(a: number) {\r\n    return function (b: number) {\r\n        return a + b;\r\n    }\r\n}\r\n\r\nconsole.log(sum(3)(6))\r\n\r\n// Task 02\r\n// Реализовать функцию makeCounter которая работает следующим образом:\r\n// const counter = makeCounter();\r\n// counter(); // 1\r\n// counter(); // 2\r\n// const counter2 = makeCounter();\r\n// counter2(); // 1\r\n// counter(); // 3\r\n\r\nfunction makeCounter() {\r\n    let count = 0\r\n    return function () {\r\n        return ++count;\r\n    }\r\n}\r\n\r\nconst counter = makeCounter();\r\ncounter();\r\nconsole.log(counter());\r\n\r\nconst counter2 = makeCounter();\r\ncounter2();\r\ncounter2();\r\ncounter2();\r\nconsole.log(counter2());\r\n\r\n/*\r\nfor () {\r\n    counter2(); //замыкание в цикле\r\n}\r\n*/\r\n\r\n// Task 03\r\n// Переписать функцию из Task 02 так, что бы она принимала число в качестве аргумента и это число было стартовым значением счетчика\r\n// и возвращала следующий объект методов:\r\n// increase: +1\r\n// decrease: -1\r\n// reset: установить счетчик в 0;\r\n// set: установить счетчик в заданное значение;\r\n\r\n\r\nfunction makeCounter3(num: number): any {\r\n    let newNum = num;\r\n    return\r\n    let count = {\r\n        increase: function () {\r\n            return ++newNum\r\n        },\r\n        decrease: function () {\r\n            return --newNum\r\n        },\r\n        reset: function () {\r\n            return newNum = 0\r\n        },\r\n    };\r\n\r\n}\r\n\r\n\r\nlet counter3 = makeCounter3(4);\r\n\r\nconsole.log(counter3.increase);\r\n\r\n\r\n// Task 04*\r\n// Реализовать функцию superSum которая принимает число в качестве аргумента, которое указывает на количество слагаемых\r\n// и что бы корректно работали следующие вызовы:\r\n// 1) superSum(0) //0\r\n// 2) superSum(3)(2)(5)(3) //10\r\n// 3) superSum(3)(2)(5,3) //10\r\n// 4) superSum(3)(2,5,3) //10\r\n// 5) superSum(3)(2,5)(3) //10\r\n// 6) superSum(3)(2,5)(3,9)  //10\r\n\r\nfunction superSum(num: number) {\r\n    if (num <= 0) return 0;\r\n    if (num === 1) return (n: number) => n;\r\n\r\n    let _arguments: number[] = [];\r\n\r\n    function helper(...args: number[]) {\r\n        _arguments = [..._arguments, ...args];\r\n        if (_arguments.length >= num) {\r\n            _arguments.length = num\r\n            return _arguments.reduce((acc, number) => acc + number);\r\n        } else {\r\n            return helper;\r\n        }\r\n    }\r\n\r\n    return helper\r\n}\r\n\r\n//@ts-ignore\r\nconsole.log(superSum(3)(2)(5)())\r\n//@ts-ignore\r\nconsole.log(superSum(3)(2)(5, 3))\r\n//@ts-ignore\r\nconsole.log(superSum(3)(2, 5, 3))\r\n\r\n\r\n// P.S. типизируйте только аргументы, а при вызове функции используйте @ts-ignore\r\n\r\n// Task 05\r\n// решить все задачи по рекурсии которые даны в конце статьи https://learn.javascript.ru/recursion\r\n/*sumTo(1) = 1\r\nsumTo(2) = 2 + 1 = 3\r\nsumTo(3) = 3 + 2 + 1 = 6\r\nsumTo(4) = 4 + 3 + 2 + 1 = 10\r\n...\r\nsumTo(100) = 100 + 99 + ... + 2 + 1 = 5050*/\r\n\r\n//рекурсия медленнее цикла, но сокращает код\r\n\r\nfunction sumTo(arg: number) {\r\n    let result = 0;\r\n    for (let i = arg; i >= 1; i--) {\r\n        result += i;\r\n    }\r\n    return result;\r\n\r\n//OR\r\n    function sumYo(arg: number): number {\r\n        if (arg === 1) return arg;\r\n        return arg + sumYo(arg - 1);\r\n    }\r\n\r\n    console.log(sumYo(100));\r\n\r\n    //Факториал натурального числа – это число, умноженное на \"себя минус один\", затем на \"себя минус два\", и так далее до 1. Факториал n обозначается как n!\r\n\r\n    function fu(arg: number): number {\r\n        if (arg === 1) return arg;\r\n        return arg * fu(arg - 1)\r\n    }\r\n\r\n    console.log(fu(3));\r\n\r\n    //Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.\r\n\r\n    function fib(arg: number): number {\r\n        if (arg < 1) return arg;\r\n        return fib(arg - 1) + fib(arg - 2);\r\n    }\r\n\r\n    console.log(fib(3));\r\n\r\n// Task 06\r\n// написать функцию, которая повторяет функционал метода flat массива на всю глубину.\r\n\r\n    function customFlatend(arr: <Array>) {\r\n        let flattend = [];\r\n\r\n        function flat(arr: <Array>) {\r\n            arr.forEach(el => {\r\n                if (Array.isArray(el)) {\r\n                    flat(el)\r\n                } else flattend.push(el);\r\n            });\r\n        } (arr)\r\n        return flattend;\r\n    }\r\n}\r\n\r\nconsole.log(customFlatened([1, 2, [3, 4]]))\r\n\r\n\r\n// just a plug\r\nexport default () => {\r\n};","D:\\study\\JS-native\\src\\redux\\state.ts",[],"D:\\study\\JS-native\\src\\lessons\\lesson3\\API.ts",["36","37"],"D:\\study\\JS-native\\src\\lessons\\lesson3\\Lesson3.tsx",["38","39"],{"ruleId":null,"fatal":true,"severity":2,"message":"40","line":185,"column":39},{"ruleId":"41","severity":1,"message":"42","line":6,"column":7,"nodeType":"43","messageId":"44","endLine":6,"endColumn":10},{"ruleId":"45","severity":1,"message":"46","line":11,"column":23,"nodeType":"47","messageId":"48","endLine":11,"endColumn":42},{"ruleId":"41","severity":1,"message":"49","line":7,"column":26,"nodeType":"43","messageId":"44","endLine":7,"endColumn":41},{"ruleId":"41","severity":1,"message":"50","line":9,"column":32,"nodeType":"43","messageId":"44","endLine":9,"endColumn":53},"Parsing error: '(' expected.","@typescript-eslint/no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'setSerachResult' is assigned a value but never used.","'setSerachResultByType' is assigned a value but never used."]